import { questions } from './src/questions.js';

// Variabler f√∂r quizens tillst√•nd
let currentQuestionIndex = 0;
let userAnswers = new Array(questions.length).fill([]);

// DOM-element som vi anv√§nder f√∂r att visa och hantera quizet.
const questionContainer = document.querySelector('#questionContainer');
const temaBtn = document.querySelector('#temaBtn');
const prevButton = document.querySelector('#prevButton');
const nextButton = document.querySelector('#nextButton');
const submitButton = document.querySelector('#submitQuiz');
const restartButton = document.querySelector('#restartQuiz');
const quizContainer = document.querySelector('#quizContainer');
const questionNumber = document.querySelector('#questionNumber');
const resultContainer = document.querySelector('#resultContainer');
const scoreElement = document.querySelector('#score');
const endResults = document.querySelector('#endResults');


// Skapar ett nytt HTML-element som man kan anpassa med text, klass och andra inst√§llningar.
function createElement(tag, className, content = '', attributes = {}) {
    const elem = document.createElement(tag);

    if (className) elem.className = className;
    if (content) elem.innerHTML = content;

    for (const attr in attributes) {
        elem.setAttribute(attr, attributes[attr]);
    }

    return elem;
}

function createInputOption(questionIndex, option, optionIndex, inputType, isChecked, handleChange) {
    const optionWrapper = createElement('div', 'option');
    
    // Skapa input-elementet med dess attribut
    const input = createElement('input', '', '', {
        type: inputType,
        name: `q${questionIndex}`,
        id: `q${questionIndex}-${optionIndex}`
    });
    // Kolla om detta alternativ redan √§r markerat
    input.checked = isChecked;

    // L√§gg till eventhanterare f√∂r √§ndringar
    input.addEventListener('change', handleChange);
    
    // Skapa label och koppla den till input
    const label = createElement('label', '', option, { htmlFor: input.id });
    // L√§gg input och label i wrappern  
    optionWrapper.append(input, label);
    label.insertBefore(input, label.firstChild);

    // Returnera det kompletta alternativet
    return optionWrapper;
}

function createQuestionElement(question, questionIndex) {
    // Skapa kortet f√∂r fr√•gan
    const questionCard = createElement('div', 'question-card');
    
    // L√§gg till fr√•gans rubrik
    const title = createElement('h3', 'question-title', question.question);
    
    // Beh√•llare f√∂r alternativen
    const optionsContainer = createElement('div', 'options-container');

    // G√• igenom varje alternativ f√∂r fr√•gan
    question.options.forEach((option, optionIndex) => {
        const isChecked = userAnswers[questionIndex].includes(option); // Kolla om svaret redan √§r valt
        const inputType = question.type === 'checkbox' ? 'checkbox' : 'radio'; // Best√§m input-typ

        // Skapa alternativet med hj√§lp av helper-funktion
        const optionElement = createInputOption(
            questionIndex,
            option,
            optionIndex,
            inputType,
            isChecked,
            () => handleAnswer(questionIndex) // Skicka index till svarshanteraren
        );

        // L√§gg alternativet i beh√•llaren
        optionsContainer.appendChild(optionElement);
    });

    // L√§gg till rubrik och alternativ i kortet
    questionCard.append(title, optionsContainer);

    // Returnera det f√§rdiga fr√•gekortet
    return questionCard;
}

function handleAnswer(questionIndex) {
    // Hitta alla inputs f√∂r den aktuella fr√•gan
    const inputs = document.querySelectorAll(`input[name="q${questionIndex}"]`);

    // Uppdatera anv√§ndarens svar f√∂r fr√•gan
    userAnswers[questionIndex] = Array.from(inputs)
        .filter(input => input.checked) // Ta bara med de som √§r markerade
        .map(input => {
            const optionIndex = Number(input.id.split('-')[1]); // Plocka ut alternativets index
            return questions[questionIndex].options[optionIndex]; // H√§mta alternativets text
        });

    // Kolla om submit-knappen ska visas
    updateSubmitButton();
}

function updateSubmitButton() {
    // Kolla om alla fr√•gor har minst ett svar
    const allAnswered = userAnswers.every(answer => answer.length > 0);

    // Visa eller g√∂m submit-knappen beroende p√• om alla fr√•gor √§r besvarade
    submitButton.classList.toggle('hidden', !allAnswered);
}

function updateNavigationButtons(index) {

    // Uppdatera texten som visar vilken fr√•ga man √§r p√•
    questionNumber.textContent = `Fr√•ga ${index + 1} av ${questions.length}`;

    // St√§ng av bak√•tknappen om man √§r p√• f√∂rsta fr√•gan
    prevButton.disabled = index === 0;

    // St√§ng av fram√•tknappen om man √§r p√• sista fr√•gan
    nextButton.disabled = index === questions.length - 1;
}

function showQuestion(index) {
    // Rensa inneh√•llet fr√•n fr√•gebeh√•llaren innan den nya fr√•gan l√§ggs till
    questionContainer.innerHTML = '';

    // L√§gg till den nya fr√•gan i beh√•llaren
    questionContainer.appendChild(createQuestionElement(questions[index], index));

    // Uppdatera navigeringsknapparna s√• att de reflekterar den aktuella fr√•gan
    updateNavigationButtons(index);    

    // S√§tt den nuvarande fr√•geindexen till det som just valts
    currentQuestionIndex = index;
}




function calculateScore() {
    // Loopar igenom alla fr√•gor och kollar om anv√§ndarens svar √§r r√§tt
    return questions.reduce((accumulator, question, index) => {
        // Kollar om anv√§ndarens svar matchar det r√§tta svaret
        const isCorrect = arraysEqual(userAnswers[index], question.correctAnswer);

        // Om svaret √§r r√§tt, l√§gg till en po√§ng
        if (isCorrect) accumulator.score++;

        // L√§gg till resultatet f√∂r denna fr√•ga, oavsett r√§tt eller fel
        accumulator.results.push({ ...question, isCorrect, userAnswer: userAnswers[index] });

        return accumulator;
    }, { score: 0, results: [] });
}

function arraysEqual(userAnswer, correctAnswer) {
    // Kollar om l√§ngderna p√• de tv√• svaren √§r samma och att varje element √§r lika
    return userAnswer.length === correctAnswer.length && 
        userAnswer.sort().every((value, index) => value === correctAnswer.sort()[index]);
}

function showResults({ score, results }) {
    // D√∂lj quizet och visa resultatet f√∂r anv√§ndaren
    quizContainer.style.display = 'none';
    resultContainer.classList.remove('hidden');

    // Ber√§kna procenten f√∂r po√§ngen och best√§m resultatets klass
    const percentage = (score / questions.length) * 100;
    const resultClass = percentage < 50 ? 'fail' : percentage <= 75 ? 'warning' : 'success';
    const resultText = percentage < 50 ? 'Underk√§nt' : percentage <= 75 ? 'Bra jobbat' : 'Riktigt bra jobbat';

    // Visa resultatet med po√§ng och r√§tt text beroende p√• resultatet
    scoreElement.innerHTML = `
        <div class="result-card ${resultClass}">
            <h3>${resultText}</h3>
            <p>Du fick ${score} r√§tt av ${questions.length} (${percentage.toFixed(1)}%)</p>
        </div>
    `;

    // Visa alla fr√•gor med anv√§ndarens svar och de r√§tta svaren
    endResults.innerHTML = results.map((result, i) => `
        <div class="question-result ${result.isCorrect ? 'correct' : 'incorrect'}">
            <p><strong>Fr√•ga ${i + 1}:</strong> ${result.question}</p>
            <p>Ditt svar: ${result.userAnswer.join(', ')}</p>
            ${result.isCorrect ? '' : `<p>R√§tt svar: ${result.correctAnswer.join(', ')}</p>`}
        </div>
    `).join('');
}


function initializeQuiz() {
    // Visa den f√∂rsta fr√•gan n√§r quizet startar
    showQuestion(0);

    prevButton.addEventListener('click', () => {
        if (currentQuestionIndex > 0) showQuestion(currentQuestionIndex - 1);
    });

    nextButton.addEventListener('click', () => {
        if (currentQuestionIndex < questions.length - 1) showQuestion(currentQuestionIndex + 1);
    });

    // N√§r anv√§ndaren klickar p√• L√§mna in knappen, r√§kna po√§ngen och visa resultatet
    submitButton.addEventListener('click', () => {
        const results = calculateScore();
        showResults(results);
    });

    // N√§r anv√§ndaren klickar p√• B√∂rja om knappen, ladda om sidan 
    restartButton.addEventListener('click', () => location.reload());
    
    // v√§xla mellan ljust och m√∂rkt tema
    temaBtn.addEventListener('click', () => {
        const body = document.body;
        const isDarkMode = body.classList.toggle('dark-mode');
        temaBtn.textContent = isDarkMode ? 'Ljust tema ‚òÄÔ∏è' : 'M√∂rkt tema üåô';
    });

    updateSubmitButton();
}

// Starta quizet
initializeQuiz();